# -*- coding: utf-8 -*-
"""Alpha_Beta_Pruning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CyrHQVlx7OauW5ZOeJC2wajU43-jdrov
"""

#3, 5, 6, 9, 1, 2, 0, -1

# Function to implement minimax with alpha-beta pruning
def alpha_beta_pruning(depth, nodeIndex, isMax, values, alpha, beta, maxDepth):
    # Base case: when we reach a leaf node
    if depth == maxDepth:
        return values[nodeIndex]

    if isMax:
        best = float('-inf')

        # Recur for left and right children
        for i in range(2):
            val = alpha_beta_pruning(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta, maxDepth)
            best = max(best, val)
            alpha = max(alpha, best)

            # Alpha Beta Pruning condition
            if beta <= alpha:
                break

        return best
    else:
        best = float('inf')

        # Recur for left and right children
        for i in range(2):
            val = alpha_beta_pruning(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta, maxDepth)
            best = min(best, val)
            beta = min(beta, best)

            # Alpha Beta Pruning condition
            if beta <= alpha:
                break

        return best


# Example tree from the image:
# Leaf node values (left to right): 3, 5, 6, 9, 1, 2, 0, -1
values = [3, 5, 6, 9, 1, 2, 0, -1]
maxDepth = 3

# Initial alpha and beta values
alpha = float('-inf')
beta = float('inf')

# Root node call
print("The optimal value is:", alpha_beta_pruning(0, 0, True, values, alpha, beta, maxDepth))

MAX, MIN = 1000, -1000

def minmax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):
    if depth == 3:
        return values[nodeIndex]

    if maximizingPlayer:
        best = MIN

        # Recur for left and right children
        for i in range(0, 2):
            val = minmax(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)

            # Alpha Beta Pruning
            if beta <= alpha:
                break

        return best

    else:
        best = MAX

        # Recur for left and right children
        for i in range(0, 2):
            val = minmax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)

            # Alpha Beta Pruning
            if beta <= alpha:
                break

        return best


if __name__ == "__main__":
    values = [3, 5, 6, 9, 1, 2, 0, -1]
    print("The optimal value is:", minmax(0, 0, True, values, MIN, MAX))